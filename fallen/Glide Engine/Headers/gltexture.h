//
// Texture handling is wierd!
//

#ifndef TEXTURE_H
#define TEXTURE_H


//
// The shadow texture page is generated by you! This is its size.
//

#define TEXTURE_SHADOW_SIZE 128


//
// Loads all the texture pages.
//

void TEXTURE_load();


//
// The number of standard texture pages.
//

extern std::int32_t TEXTURE_page_num_standard;

extern std::int32_t TEXTURE_page_fog;		// The fog texture page.
extern std::int32_t TEXTURE_page_moon;		// The moon texture page.
extern std::int32_t TEXTURE_page_clouds;	// The clouds texture page.
extern std::int32_t TEXTURE_page_water;	// The water texture page.
extern std::int32_t TEXTURE_page_puddle;	// The puddle texture page.
extern std::int32_t TEXTURE_page_shadow;	// The shadow texture page.
extern std::int32_t TEXTURE_page_detail;	// PRIVATE!

extern std::int32_t TEXTURE_num_textures;	// The total number of pages.


//
// The shadow page is a byte-per pixel intensity format whose size
// is (TEXTURE_SHADOW_SIZE x TEXTURE_SHADOW_SIZE)
//

void TEXTURE_download_shadow_page(std::uint8_t *data);

//
// Puts the render-states into a known state so that set_page will work.
// Do this after you've fiddled about with renderstates yourself.
//

void TEXTURE_init_states();

//
// Sets up all the render states to use this given texture page with trilineaer
// mippmapping or with detail texturing if appropriate.
//

#define TEXTURE_MULTI_TRILINEAR	1
#define TEXTURE_MULTI_DETAIL	2

void TEXTURE_set_page(std::int32_t page, std::int32_t multi);


//
// Returns the four texture coordinates of the given MiniTextureBits structure
//

void TEXTURE_get_minitexturebits_uvs(
		std::uint16_t			texture,
		std::int32_t          *page,
		float          *u0,
		float          *v0,
		float          *u1,
		float          *v1,
		float          *u2,
		float          *v2,
		float          *u3,
		float          *v3);

//
// Fixed prims to work with fiddled textures. Does nothing if
// the textures were loaded normally.
//

void TEXTURE_fix_prim_textures();

//
// Gives the uv of the top left of the given texture square and
// returns the page.
//

std::int32_t TEXTURE_get_fiddled_position(
		std::int32_t  square_u,
		std::int32_t  square_v,
		std::int32_t  page,
		float *u,
		float *v);


#endif
